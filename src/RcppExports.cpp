// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "rpathsonpaths_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// PopsNetwork
XPtr<Net_t> PopsNetwork(DataFrame links, DataFrame external, double transmission);
RcppExport SEXP rpathsonpaths_PopsNetwork(SEXP linksSEXP, SEXP externalSEXP, SEXP transmissionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type links(linksSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type external(externalSEXP);
    Rcpp::traits::input_parameter< double >::type transmission(transmissionSEXP);
    rcpp_result_gen = Rcpp::wrap(PopsNetwork(links, external, transmission));
    return rcpp_result_gen;
END_RCPP
}
// spreadDirichlet
XPtr<Net_t> spreadDirichlet(const XPtr<Net_t>& pNet, const List iniDist, double theta);
RcppExport SEXP rpathsonpaths_spreadDirichlet(SEXP pNetSEXP, SEXP iniDistSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type pNet(pNetSEXP);
    Rcpp::traits::input_parameter< const List >::type iniDist(iniDistSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(spreadDirichlet(pNet, iniDist, theta));
    return rcpp_result_gen;
END_RCPP
}
// getPopsNode
XPtr<Node_t> getPopsNode(const XPtr<Net_t>& pNet, int id);
RcppExport SEXP rpathsonpaths_getPopsNode(SEXP pNetSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type pNet(pNetSEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(getPopsNode(pNet, id));
    return rcpp_result_gen;
END_RCPP
}
// drawIsolates_PopsNode
IntegerVector drawIsolates_PopsNode(const XPtr<Node_t>& pNode, int n);
RcppExport SEXP rpathsonpaths_drawIsolates_PopsNode(SEXP pNodeSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Node_t>& >::type pNode(pNodeSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(drawIsolates_PopsNode(pNode, n));
    return rcpp_result_gen;
END_RCPP
}
// drawIsolates_PopsNetwork
DataFrame drawIsolates_PopsNetwork(const XPtr<Net_t>& pNet, DataFrame samples);
RcppExport SEXP rpathsonpaths_drawIsolates_PopsNetwork(SEXP pNetSEXP, SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type pNet(pNetSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type samples(samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(drawIsolates_PopsNetwork(pNet, samples));
    return rcpp_result_gen;
END_RCPP
}
