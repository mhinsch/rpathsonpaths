// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "rpathsonpaths_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// sources
IntegerVector sources(const DataFrame& edgeList);
RcppExport SEXP rpathsonpaths_sources(SEXP edgeListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type edgeList(edgeListSEXP);
    rcpp_result_gen = Rcpp::wrap(sources(edgeList));
    return rcpp_result_gen;
END_RCPP
}
// colourNetwork
IntegerVector colourNetwork(const DataFrame& edgeList);
RcppExport SEXP rpathsonpaths_colourNetwork(SEXP edgeListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type edgeList(edgeListSEXP);
    rcpp_result_gen = Rcpp::wrap(colourNetwork(edgeList));
    return rcpp_result_gen;
END_RCPP
}
// PopsNetwork
XPtr<Net_t> PopsNetwork(const DataFrame& links, const DataFrame& external, double transmission);
RcppExport SEXP rpathsonpaths_PopsNetwork(SEXP linksSEXP, SEXP externalSEXP, SEXP transmissionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type links(linksSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type external(externalSEXP);
    Rcpp::traits::input_parameter< double >::type transmission(transmissionSEXP);
    rcpp_result_gen = Rcpp::wrap(PopsNetwork(links, external, transmission));
    return rcpp_result_gen;
END_RCPP
}
// print_PopsNetwork
void print_PopsNetwork(const XPtr<Net_t>& pNet);
RcppExport SEXP rpathsonpaths_print_PopsNetwork(SEXP pNetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type pNet(pNetSEXP);
    print_PopsNetwork(pNet);
    return R_NilValue;
END_RCPP
}
// print_PopsNode
void print_PopsNode(const XPtr<Node_t>& pNode);
RcppExport SEXP rpathsonpaths_print_PopsNode(SEXP pNodeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Node_t>& >::type pNode(pNodeSEXP);
    print_PopsNode(pNode);
    return R_NilValue;
END_RCPP
}
// setAlleleFreqs
XPtr<Net_t> setAlleleFreqs(const XPtr<Net_t>& pNet, const List& iniDist);
RcppExport SEXP rpathsonpaths_setAlleleFreqs(SEXP pNetSEXP, SEXP iniDistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type pNet(pNetSEXP);
    Rcpp::traits::input_parameter< const List& >::type iniDist(iniDistSEXP);
    rcpp_result_gen = Rcpp::wrap(setAlleleFreqs(pNet, iniDist));
    return rcpp_result_gen;
END_RCPP
}
// spreadDirichlet
XPtr<Net_t> spreadDirichlet(const XPtr<Net_t>& pNet, double theta, Nullable<List> iniDist);
RcppExport SEXP rpathsonpaths_spreadDirichlet(SEXP pNetSEXP, SEXP thetaSEXP, SEXP iniDistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type pNet(pNetSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type iniDist(iniDistSEXP);
    rcpp_result_gen = Rcpp::wrap(spreadDirichlet(pNet, theta, iniDist));
    return rcpp_result_gen;
END_RCPP
}
// getPopsNode
XPtr<Node_t> getPopsNode(const XPtr<Net_t>& pNet, int id);
RcppExport SEXP rpathsonpaths_getPopsNode(SEXP pNetSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type pNet(pNetSEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(getPopsNode(pNet, id));
    return rcpp_result_gen;
END_RCPP
}
// drawIsolates_PopsNode
IntegerVector drawIsolates_PopsNode(const XPtr<Node_t>& pNode, int n);
RcppExport SEXP rpathsonpaths_drawIsolates_PopsNode(SEXP pNodeSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Node_t>& >::type pNode(pNodeSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(drawIsolates_PopsNode(pNode, n));
    return rcpp_result_gen;
END_RCPP
}
// drawIsolates_PopsNetwork
DataFrame drawIsolates_PopsNetwork(const XPtr<Net_t>& pNet, const DataFrame& samples);
RcppExport SEXP rpathsonpaths_drawIsolates_PopsNetwork(SEXP pNetSEXP, SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type pNet(pNetSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type samples(samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(drawIsolates_PopsNetwork(pNet, samples));
    return rcpp_result_gen;
END_RCPP
}
// edgeList
DataFrame edgeList(const XPtr<Net_t>& pNet);
RcppExport SEXP rpathsonpaths_edgeList(SEXP pNetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type pNet(pNetSEXP);
    rcpp_result_gen = Rcpp::wrap(edgeList(pNet));
    return rcpp_result_gen;
END_RCPP
}
// nodeList
DataFrame nodeList(const XPtr<Net_t>& pNet);
RcppExport SEXP rpathsonpaths_nodeList(SEXP pNetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type pNet(pNetSEXP);
    rcpp_result_gen = Rcpp::wrap(nodeList(pNet));
    return rcpp_result_gen;
END_RCPP
}
