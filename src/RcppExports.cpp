// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "rpathsonpaths_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// sources
IntegerVector sources(const DataFrame& edge_list);
RcppExport SEXP _rpathsonpaths_sources(SEXP edge_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type edge_list(edge_listSEXP);
    rcpp_result_gen = Rcpp::wrap(sources(edge_list));
    return rcpp_result_gen;
END_RCPP
}
// sinks
IntegerVector sinks(const DataFrame& edge_list);
RcppExport SEXP _rpathsonpaths_sinks(SEXP edge_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type edge_list(edge_listSEXP);
    rcpp_result_gen = Rcpp::wrap(sinks(edge_list));
    return rcpp_result_gen;
END_RCPP
}
// colour_network
IntegerVector colour_network(const DataFrame& edge_list);
RcppExport SEXP _rpathsonpaths_colour_network(SEXP edge_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type edge_list(edge_listSEXP);
    rcpp_result_gen = Rcpp::wrap(colour_network(edge_list));
    return rcpp_result_gen;
END_RCPP
}
// cycles
SEXP cycles(const DataFrame& edge_list, bool record);
RcppExport SEXP _rpathsonpaths_cycles(SEXP edge_listSEXP, SEXP recordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type edge_list(edge_listSEXP);
    Rcpp::traits::input_parameter< bool >::type record(recordSEXP);
    rcpp_result_gen = Rcpp::wrap(cycles(edge_list, record));
    return rcpp_result_gen;
END_RCPP
}
// popsnetwork
XPtr<Net_t> popsnetwork(const DataFrame& links, const DataFrame& external, double transmission, double decay, const string& spread_model, bool checks);
RcppExport SEXP _rpathsonpaths_popsnetwork(SEXP linksSEXP, SEXP externalSEXP, SEXP transmissionSEXP, SEXP decaySEXP, SEXP spread_modelSEXP, SEXP checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type links(linksSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type external(externalSEXP);
    Rcpp::traits::input_parameter< double >::type transmission(transmissionSEXP);
    Rcpp::traits::input_parameter< double >::type decay(decaySEXP);
    Rcpp::traits::input_parameter< const string& >::type spread_model(spread_modelSEXP);
    Rcpp::traits::input_parameter< bool >::type checks(checksSEXP);
    rcpp_result_gen = Rcpp::wrap(popsnetwork(links, external, transmission, decay, spread_model, checks));
    return rcpp_result_gen;
END_RCPP
}
// print_popsnetwork
void print_popsnetwork(const XPtr<Net_t>& p_net);
RcppExport SEXP _rpathsonpaths_print_popsnetwork(SEXP p_netSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type p_net(p_netSEXP);
    print_popsnetwork(p_net);
    return R_NilValue;
END_RCPP
}
// set_allele_freqs
XPtr<Net_t> set_allele_freqs(const XPtr<Net_t>& p_net, const List& ini_dist);
RcppExport SEXP _rpathsonpaths_set_allele_freqs(SEXP p_netSEXP, SEXP ini_distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type p_net(p_netSEXP);
    Rcpp::traits::input_parameter< const List& >::type ini_dist(ini_distSEXP);
    rcpp_result_gen = Rcpp::wrap(set_allele_freqs(p_net, ini_dist));
    return rcpp_result_gen;
END_RCPP
}
// popgen_dirichlet
XPtr<Net_t> popgen_dirichlet(const XPtr<Net_t>& p_net, double theta, Nullable<List> ini_dist);
RcppExport SEXP _rpathsonpaths_popgen_dirichlet(SEXP p_netSEXP, SEXP thetaSEXP, SEXP ini_distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type p_net(p_netSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type ini_dist(ini_distSEXP);
    rcpp_result_gen = Rcpp::wrap(popgen_dirichlet(p_net, theta, ini_dist));
    return rcpp_result_gen;
END_RCPP
}
// popgen_ibm_mixed
XPtr<Net_t> popgen_ibm_mixed(const XPtr<Net_t>& p_net, Nullable<List> ini_dist);
RcppExport SEXP _rpathsonpaths_popgen_ibm_mixed(SEXP p_netSEXP, SEXP ini_distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type p_net(p_netSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type ini_dist(ini_distSEXP);
    rcpp_result_gen = Rcpp::wrap(popgen_ibm_mixed(p_net, ini_dist));
    return rcpp_result_gen;
END_RCPP
}
// draw_isolates
DataFrame draw_isolates(const XPtr<Net_t>& p_net, const DataFrame& samples, bool aggregate);
RcppExport SEXP _rpathsonpaths_draw_isolates(SEXP p_netSEXP, SEXP samplesSEXP, SEXP aggregateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type p_net(p_netSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< bool >::type aggregate(aggregateSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_isolates(p_net, samples, aggregate));
    return rcpp_result_gen;
END_RCPP
}
// draw_alleles
DataFrame draw_alleles(const XPtr<Net_t>& p_net, const IntegerVector& nodes, int n);
RcppExport SEXP _rpathsonpaths_draw_alleles(SEXP p_netSEXP, SEXP nodesSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type p_net(p_netSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_alleles(p_net, nodes, n));
    return rcpp_result_gen;
END_RCPP
}
// edge_list
DataFrame edge_list(const XPtr<Net_t>& p_net, bool as_string);
RcppExport SEXP _rpathsonpaths_edge_list(SEXP p_netSEXP, SEXP as_stringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type p_net(p_netSEXP);
    Rcpp::traits::input_parameter< bool >::type as_string(as_stringSEXP);
    rcpp_result_gen = Rcpp::wrap(edge_list(p_net, as_string));
    return rcpp_result_gen;
END_RCPP
}
// node_list
DataFrame node_list(const XPtr<Net_t>& p_net, bool as_string);
RcppExport SEXP _rpathsonpaths_node_list(SEXP p_netSEXP, SEXP as_stringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type p_net(p_netSEXP);
    Rcpp::traits::input_parameter< bool >::type as_string(as_stringSEXP);
    rcpp_result_gen = Rcpp::wrap(node_list(p_net, as_string));
    return rcpp_result_gen;
END_RCPP
}
// distances_topology
NumericMatrix distances_topology(const XPtr<Net_t>& p_net);
RcppExport SEXP _rpathsonpaths_distances_topology(SEXP p_netSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type p_net(p_netSEXP);
    rcpp_result_gen = Rcpp::wrap(distances_topology(p_net));
    return rcpp_result_gen;
END_RCPP
}
// distances_freqdist
NumericMatrix distances_freqdist(const XPtr<Net_t>& p_net, bool skip_empty);
RcppExport SEXP _rpathsonpaths_distances_freqdist(SEXP p_netSEXP, SEXP skip_emptySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type p_net(p_netSEXP);
    Rcpp::traits::input_parameter< bool >::type skip_empty(skip_emptySEXP);
    rcpp_result_gen = Rcpp::wrap(distances_freqdist(p_net, skip_empty));
    return rcpp_result_gen;
END_RCPP
}
// distances_sample
NumericMatrix distances_sample(const XPtr<Net_t>& p_net, int n, bool skip_empty);
RcppExport SEXP _rpathsonpaths_distances_sample(SEXP p_netSEXP, SEXP nSEXP, SEXP skip_emptySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type p_net(p_netSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type skip_empty(skip_emptySEXP);
    rcpp_result_gen = Rcpp::wrap(distances_sample(p_net, n, skip_empty));
    return rcpp_result_gen;
END_RCPP
}
// distances_EHamming
NumericMatrix distances_EHamming(const XPtr<Net_t>& p_net, bool skip_empty);
RcppExport SEXP _rpathsonpaths_distances_EHamming(SEXP p_netSEXP, SEXP skip_emptySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const XPtr<Net_t>& >::type p_net(p_netSEXP);
    Rcpp::traits::input_parameter< bool >::type skip_empty(skip_emptySEXP);
    rcpp_result_gen = Rcpp::wrap(distances_EHamming(p_net, skip_empty));
    return rcpp_result_gen;
END_RCPP
}
// generate_PA
DataFrame generate_PA(int n_nodes, int n_sources, NumericVector m_dist, float zero_appeal, bool compact);
RcppExport SEXP _rpathsonpaths_generate_PA(SEXP n_nodesSEXP, SEXP n_sourcesSEXP, SEXP m_distSEXP, SEXP zero_appealSEXP, SEXP compactSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_nodes(n_nodesSEXP);
    Rcpp::traits::input_parameter< int >::type n_sources(n_sourcesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type m_dist(m_distSEXP);
    Rcpp::traits::input_parameter< float >::type zero_appeal(zero_appealSEXP);
    Rcpp::traits::input_parameter< bool >::type compact(compactSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_PA(n_nodes, n_sources, m_dist, zero_appeal, compact));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rpathsonpaths_sources", (DL_FUNC) &_rpathsonpaths_sources, 1},
    {"_rpathsonpaths_sinks", (DL_FUNC) &_rpathsonpaths_sinks, 1},
    {"_rpathsonpaths_colour_network", (DL_FUNC) &_rpathsonpaths_colour_network, 1},
    {"_rpathsonpaths_cycles", (DL_FUNC) &_rpathsonpaths_cycles, 2},
    {"_rpathsonpaths_popsnetwork", (DL_FUNC) &_rpathsonpaths_popsnetwork, 6},
    {"_rpathsonpaths_print_popsnetwork", (DL_FUNC) &_rpathsonpaths_print_popsnetwork, 1},
    {"_rpathsonpaths_set_allele_freqs", (DL_FUNC) &_rpathsonpaths_set_allele_freqs, 2},
    {"_rpathsonpaths_popgen_dirichlet", (DL_FUNC) &_rpathsonpaths_popgen_dirichlet, 3},
    {"_rpathsonpaths_popgen_ibm_mixed", (DL_FUNC) &_rpathsonpaths_popgen_ibm_mixed, 2},
    {"_rpathsonpaths_draw_isolates", (DL_FUNC) &_rpathsonpaths_draw_isolates, 3},
    {"_rpathsonpaths_draw_alleles", (DL_FUNC) &_rpathsonpaths_draw_alleles, 3},
    {"_rpathsonpaths_edge_list", (DL_FUNC) &_rpathsonpaths_edge_list, 2},
    {"_rpathsonpaths_node_list", (DL_FUNC) &_rpathsonpaths_node_list, 2},
    {"_rpathsonpaths_distances_topology", (DL_FUNC) &_rpathsonpaths_distances_topology, 1},
    {"_rpathsonpaths_distances_freqdist", (DL_FUNC) &_rpathsonpaths_distances_freqdist, 2},
    {"_rpathsonpaths_distances_sample", (DL_FUNC) &_rpathsonpaths_distances_sample, 3},
    {"_rpathsonpaths_distances_EHamming", (DL_FUNC) &_rpathsonpaths_distances_EHamming, 2},
    {"_rpathsonpaths_generate_PA", (DL_FUNC) &_rpathsonpaths_generate_PA, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_rpathsonpaths(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
